'''
    This script basically generates a copy of Setup_LowPower.xml but it plays around with 
    the mux_decoder individual pixel settings to create a chessboard pattern across all ASICs

    Author: ckd27546
'''
import os, argparse


class GenerateXML():



    def __init__(self):

        self.preambleXml = '''<?xml version="1.0"?>
   <lpd_slow_ctrl_sequence name="Setup_Chessboard.xml.xml"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:noNamespaceSchemaLocation="lpdAsicSetupParams.xsd">
   <!-- This file is hand edited 
        bias settings needed for lower power on 2-tile to avoid asic v2 tile current tripping -->

   <mux_decoder_default value="0"/>
   <feedback_select_default value="0"/>
   <self_test_decoder_default value="0"/>
   <self_test_enable value="1"/>

   <!-- Here begins portion generated by GenerateChessboard.py /-->\n'''
        
        self.postambleXml = '''
   <!-- force 1st pixel to output all '1's to verify timing of 1st data bit in serial data streams /-->
   <mux_decoder pixel="0" value="4"/>

   <daq_bias index="0" value="8"/>  <!-- lower power -->
   <daq_bias index="1" value="13"/> <!-- lower power -->
   <daq_bias index="2" value="18"/> <!-- lower power -->
   <daq_bias index="3" value="24"/>
   <daq_bias index="4" value="18"/>
   <daq_bias index="5" value="20"/> 
   <daq_bias index="6" value="23"/>
   <daq_bias index="7" value="25"/>
   <daq_bias index="8" value="18"/>
   <daq_bias index="9" value="16"/>
   <daq_bias index="10" value="18"/>
   <daq_bias index="11" value="21"/>
   <daq_bias index="12" value="18"/> <!-- lower power -->
   <daq_bias index="13" value="22"/>
   <daq_bias index="14" value="31"/>
   <daq_bias index="15" value="29"/>
   <daq_bias index="16" value="25"/>
   <daq_bias index="17" value="18"/>
   <daq_bias index="18" value="16"/>
   <daq_bias index="19" value="22"/>
   <daq_bias index="20" value="23"/>
   <daq_bias index="21" value="15"/> <!-- matt changed for x100 baseline -->
   <daq_bias index="22" value="22"/>
   <daq_bias index="23" value="24"/>
   <daq_bias index="24" value="23"/>
   <daq_bias index="25" value="24"/>
   <daq_bias index="26" value="23"/>
   <daq_bias index="27" value="22"/>
   <daq_bias index="28" value="23"/>
   <daq_bias index="29" value="23"/>
   <daq_bias index="30" value="15"/>
   <daq_bias index="31" value="16"/>  <!-- was changing this value -->
   <daq_bias index="32" value="18"/>
   <daq_bias index="33" value="23"/>
   <daq_bias index="34" value="25"/>
   <daq_bias index="35" value="8"/>
   <daq_bias index="36" value="0"/>
   <daq_bias index="37" value="19"/>
   <daq_bias index="38" value="19"/>
   <daq_bias index="39" value="19"/>
   <daq_bias index="40" value="19"/>
   <daq_bias index="41" value="19"/>
   <daq_bias index="42" value="23"/>
   <daq_bias index="43" value="23"/>
   <daq_bias index="44" value="23"/>
   <daq_bias index="45" value="19"/>
   <daq_bias index="46" value="23"/>

   <spare_bits value="0"/>
   <filter_control value="0"/>
   <adc_clock_delay value="4"/>
   <digital_control value="5406687746"/>
</lpd_slow_ctrl_sequence>'''


    def generateFile(self):
        """ 
        """
        generatedString =  ""
        value = 4
        for row in range(32):
            for col in range(16):

                pixelNumber = col + (row * 16)
                if (row % 2) == 0:
                    if (col % 2) == 0:
                        generatedString += '''   <mux_decoder pixel="%i" value="%i"/>\n''' % (pixelNumber, value)
                else:
                    if (col % 2) == 1:
                        generatedString += '''   <mux_decoder pixel="%i" value="%i"/>\n''' % (pixelNumber, value)


        completedXml = ""
        completedXml += self.preambleXml
        completedXml += generatedString
        completedXml += self.postambleXml
        
        fileName = 'app/lpd/tests/Config/SetupParams/Setup_Chessboard.xml'
        try:
            f = open(fileName,'w')
            f.write(completedXml)
            f.close()
        except Exception as e:
            print "Error writing XML file: ", e
        
        # Check size of generated file
        result = os.popen("ls -la %s" % fileName)
        print "Generated file:\n", result.readlines()
        result.close()
        
if __name__ == "__main__":

    # Create parser object and arguments
#    parser = argparse.ArgumentParser(description="superModuleReceiveTest.py - Receive data from a Super Module. ",
#                                     epilog="Default: femhost=10.0.0.1, femport=61649 and asicModule=0, all other flags' default values denoted by 'D: x'.")
#
#    parser.add_argument("--asicmodule",     help="Set ASIC Module (0=supermodule, 1=Asic, 2=2-Tile , 3=fem, 4=Raw data)", type=int, choices=[0, 1, 2, 3, 4], default=asicModule)
#    args = parser.parse_args()
#
#    asicModule  = args.asicmodule

    object = GenerateXML()
    object.generateFile()

